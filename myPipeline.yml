# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger: none
# - master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'SCPenco'

  # Function app name
  functionAppName: 'GetWebAPI'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)'

parameters:
- name: BuildAndDeploy
  displayName: Build Azure function
  type: boolean
  default: false
#- name: JMeter
#  displayName: Run JMeter test
#  type: boolean
#  default: true
#- name: ChatGPT
#  displayName: Run ChatGPT analysis
#  type: boolean
#  default: true

resources:
  repositories:
    - repository: templates
      type: github
      name: apencoreply/DevOpsEmpowerTool
      endpoint: devopsempowertool


stages:
- stage: BuildAndDeploy
  condition: eq('${{ parameters.BuildAndDeploy }}', 'true')
  displayName: Build and Deploy stage

  jobs:
  - job: Restore
    displayName: Restore
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: |
          $(workingDirectory)/*.csproj

  - job: Build
    displayName: Build
    dependsOn: Restore
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

  - deployment: Deploy
    displayName: Deploy
    dependsOn: Build
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@2
            inputs:
              connectedServiceNameARM: 'SCPenco'
              appType: 'functionApp'
              appName: 'GetWebAPI'
              package: '$(System.DefaultWorkingDirectory)/**/*.zip'
              deploymentMethod: 'auto'