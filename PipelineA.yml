# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'SCPenco'

  # Function app name
  functionAppName: 'GetWebAPI'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/GetWebAPI'

parameters:
  - name: Build 
    displayName: Build Azure function
    type: boolean
    default: false
  - name: Deploy
    displayName: Deploy Azure function
    type: boolean
    default: false

stages:
- stage: Build
  condition: eq('${{ parameters.Build }}', 'true')
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), eq('${{ parameters.Deploy }}', 'true'))
  # condition: succeeded()


  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: TriggerPipelineB  
  jobs:  
  - job: TriggerPipelineB  
    steps:  
    - script: |  
        echo "Triggering the second pipeline"  
          
        # Trigger the second pipeline  
        response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer gbxek5guc2m2vs7vygpjtneuuyh7q5nti7dyifubz6erxmcjchka" -d "{\"definition\": {\"id\": 31}}" "https://dev.azure.com/apenco/DevTest/_apis/build/builds?api-version=6.0")  
          
        # Extract the ID of the pipeline run  
        runId=$(echo $response | jq '.id')  
          
        echo "Triggered pipeline run ID: $runId"  
      displayName: 'Trigger second pipeline


